@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Quilt4Net.Toolkit.Features.Content
@using Quilt4Net.Toolkit.Features.FeatureToggle
@using Radzen
@inject IJSRuntime JsRuntime
@inject IContentService ContentService
@inject IEditContentService EditContentService
@inject ILanguageStateService LanguageStateService
@inject DialogService DialogService

@if (!string.IsNullOrEmpty(_content))
{
    <span style="@_edit" @onclick="OpenDialog" role="button" tabindex="0" @onkeydown="OnKeyDown">
        @((MarkupString)_content)
    </span>
}
else
{
    <div style="display:none" @ref="_holder">
        @ChildContent
    </div>
}

@code {
    private const string EditStyle = "display: inline-block; padding: 0px; outline: 2px dotted #ffc0cb; outline-offset: -4px; cursor: pointer;";
    private ElementReference _holder;
    private IJSObjectReference _mod;
    private string _content;
    private string _edit = "";
    private (string Value, bool Success) _response;

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LanguageStateService.LanguageChangedEvent += async (_, _) =>
        {
            await LoadContentAsync();
            await InvokeAsync(StateHasChanged);
        };
        EditContentService.EditModeEvent += (_, e) =>
        {
            _edit = e.Enabled ? EditStyle : "";
            StateHasChanged();
        };
        _edit = EditContentService.Enabled ? EditStyle : "";

        await LoadContentAsync();
    }

    private async Task LoadContentAsync()
    {
        _response = await ContentService.GetContentAsync(Key, "", LanguageStateService.Selected?.Key ?? Guid.Empty, null);
        if (_response.Success) _content = _response.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            const string js = "export function getInnerHtml(el) { return el?.innerHTML ?? ''; }";
            var dataUrl = $"data:text/javascript;charset=utf-8,{Uri.EscapeDataString(js)}";
            _mod = await JsRuntime.InvokeAsync<IJSObjectReference>("import", dataUrl);
        }

        if (string.IsNullOrEmpty(_content) && ChildContent is not null && _mod is not null)
        {
            var defaultHtml = await _mod.InvokeAsync<string>("getInnerHtml", _holder);
            if (_response.Success)
            {
                await ContentService.SetContentAsync(Key, defaultHtml, Guid.Empty, ContentFormat.Html);
            }
            _content = defaultHtml;
            StateHasChanged();
        }
    }

    private static readonly Regex _blazorAttrs = new(
        @"\s@(?:onclick|on\w+|bind(?:-\w+)?|ref|attributes)\s*=\s*""[^""]*""",
        RegexOptions.IgnoreCase | RegexOptions.Compiled);

    private static string Sanitize(string html) =>
        string.IsNullOrEmpty(html) ? string.Empty : _blazorAttrs.Replace(html, "");

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" or " " or "Spacebar")
            await OpenDialog();
    }

    private async Task OpenDialog()
    {
        if (!EditContentService.Enabled) return;
        if (!_response.Success) return;

        var response = await DialogService.OpenAsync<ContentEditDialog>($"Edit {Key}",
            new Dictionary<string, object>
            {
                { "Key", Key },
                { "Content", _content },
                { "ContentFormat", ContentFormat.Html },
            });
        if (response != true) return;

        _response = await ContentService.GetContentAsync(Key, null, LanguageStateService.Selected?.Key ?? Guid.Empty, null);
        _content = _response.Value;
        StateHasChanged();
    }
}
