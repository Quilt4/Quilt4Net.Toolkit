@using Microsoft.AspNetCore.Components.Web
@using Quilt4Net.Toolkit.Features.Content
@using Quilt4Net.Toolkit.Features.FeatureToggle
@inject IContentService ContentService
@inject IEditContentService EditContentService
@inject ILanguageStateService LanguageStateService
@inject Radzen.DialogService DialogService

<RadzenText Text="@_content" TextStyle="@TextStyle" Attributes="@(new Dictionary<string, object> { { "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, OpenDialog) } })" style="@GetStyle()" Visible="@Visible" />

@code {
    private const string EditStyle = "outline: 2px dotted #ffc0cb; outline-offset: -4px; cursor: pointer;";
    private string _content;
    private string _edit = null;
    private (string Value, bool Success) _response;

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public string Default { get; set; }

    [Parameter]
    public TextStyle TextStyle { get; set; } = TextStyle.Body1;

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public string Style { get; set; }

    private string GetStyle() => _edit ?? Style;

    protected override async Task OnInitializedAsync()
    {
        LanguageStateService.LanguageChangedEvent += async (_, e) =>
        {
            await LoadContentAsync();
            await InvokeAsync(StateHasChanged);
        };
        EditContentService.EditModeEvent += (s, e) =>
        {
            _edit = e.Enabled ? EditStyle : null;
            StateHasChanged();
        };
        _edit = EditContentService.Enabled ? EditStyle : null;

        await LoadContentAsync();
    }

    private async Task LoadContentAsync()
    {
        _response = await ContentService.GetContentAsync(Key, Default, LanguageStateService.Selected?.Key ?? Guid.Empty, ContentFormat.String);
        _content = _response.Value;
    }

    private async Task OpenDialog()
    {
        if (!EditContentService.Enabled) return;
        if (!_response.Success) return;

        var result = await DialogService.OpenAsync<ContentEditDialog>($"Edit {Key}",
            new Dictionary<string, object>
            {
                { "Key", Key },
                { "Content", _content },
                { "ContentFormat", ContentFormat.String },
            });
        if (result != true) return;

        _response = await ContentService.GetContentAsync(Key, null, LanguageStateService.Selected?.Key ?? Guid.Empty, null);
        _content = _response.Value;
        StateHasChanged();
    }
}
